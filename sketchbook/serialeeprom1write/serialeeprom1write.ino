/*
  *  Use the I2C bus with EEPROM 24LC64 adapted for PCD8572/McMicro
  *  Sketch:    eeprom.ino
  *
  *  Author: hkhijhe
  *  Date: 01/10/2010
  *
  *
  */

#include <Wire.h>

//byte edata[]={0x00,0x41,0x81,0x10,0x16,0x81,0x12,0x01,0x02,0x0C,0x00,0x4E,0xA8,0x20,0x16,0x3B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x70,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x08,0x6E,0x09,0x12,0x6F};
byte onehander425[]=  {0x32,0x41,0x81,0x4C,0x16,0x81,0x12,0x01,0x02,0x0C,0x00,0x4E,0xA8,0x20,0x16,0x3B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x70,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x05,0x11,0x38};
byte onehander475[]=  {0x32,0x41,0x81,0x0C,0x16,0x81,0x12,0x01,0x02,0x0C,0x00,0x4E,0xA8,0x20,0x16,0x3B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x70,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x05,0x11,0x38};

// Tx 71.875
// Rx 85.375
// no clock shift
// ACK:STD; SE.CA.:300; MU.CA.:448; G.CA.:STD; G.LEVEL:; B.CA:; S.RF:25W; TOT/RE DLY 075:OMIT; A.R. STD: 7; MAB Numbers B137,B075, B300
byte eightch_orig_e1_245RNE0659[]={0xB3,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xC3,0x05,0x25,0x53,0x25,0x18,0xB0,0x04,0x1C,0x70,0x32,0x18,0xB0,0x04,0x1C,0x70,0x32,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x18,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0x0};
byte eightch_orig_e2_245RNE0659[]={0xCE,0x00,0x93,0xCA,0xA1,0x06,0x02,0x02,0x81,0x82,0x70,0x00,0x06,0x02,0x02,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x70,0x70,0x00,0x06,0x02,0x02,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x06,0x02,0x02,0x08,0x09,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x06,0x59};

// Tx 71.875
// Rx 85.375
// no clock shift
// ACK:STD; SE.CA.:300; MU.CA.:448; G.CA.:STD; G.LEVEL:; B.CA:; S.RF:25W; TOT/RE DLY 075:OMIT; A.R. STD: 7
byte eightch_orig_e1_245RLQ0854[]={0xAE,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xC3,0x05,0x25,0x53,0x25,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x17,0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0x00};
byte eightch_orig_e2_245RLQ0854[]={0xCE,0x00,0x93,0xCA,0xA1,0x06,0x03,0x01,0x81,0x82,0x70,0x00,0x06,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x71,0x70,0x00,0x06,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x06,0x03,0x01,0x08,0x09,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x54};

// 425/475/400/375/3625/3875/4325/45
byte eightch_one_eeprom_245RMC1243[]={0x16,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x02,0x67,0x03,0xB4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xC3,0x05,0x25,0x53,0x25,0x1C,0x02,0x04,0x20,0x61,0x2B,0x18,0xB0,0x04,0x1C,0x70,0x32,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0xE0};

// 8 ch low band M110 rx 71.875 tx 85.375 tx "monitor"
byte eightch_m110_186RSA2205_e1[]={0xF2,0xF3,0xE1,0xB2,0xB2,0xB0,0xB5,0x45,0x5A,0x39,0xF0,0x32,0x00,0x00,0x00,0x40,0xFE,0x59,0x00,0x03,0x35,0x03,0x35,0x13,0x3D,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x4A,0xD9,0x41,0xCE,0x02,0x03,0x07,0x08,0x08,0x70,0x02,0x03,0x07,0x80,0x81,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x18,0xB0,0x04,0x1C,0x70,0x32,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x21,0xD3,0x05,0x27,0x4D,0x23,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x2B,0x85,0x83,0x16,0x8F,0x40,0x31,0x80,0x83,0x19,0x7D,0x38,0x05,0x00,0x01,0xAA,0xC2};
byte eightch_m110_186RSA2205_e2[]={0x13,0x13,0x00,0x09,0x36,0x3C,0x00,0x0A,0x00,0x16,0x81,0x12,0x01,0x03,0x3A,0x01,0x00,0x01,0x3C,0x85,0x1F,0x28,0x05,0xAB,0x08,0x03,0x3A,0x05,0x00,0x01,0x3C,0x85,0x1F,0x28,0x05,0xAB,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

byte eightch_m110_186RRE0644_e1[]={0x52,0x52,0x45,0x30,0x36,0x34,0x34,0x45,0x5A,0x39,0xF0,0x32,0x00,0x00,0x00,0x19,0xFE,0x59,0x00,0x03,0x35,0x03,0x35,0x13,0x3D,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x4A,0xD9,0x41,0xCE,0x07,0x02,0x02,0x08,0x08,0x70,0x07,0x02,0x02,0x80,0x81,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x21,0xD3,0x05,0x27,0x4D,0x23,0x18,0xB0,0x04,0x1C,0x70,0x32,0x18,0xB0,0x04,0x1C,0x70,0x32,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x2B,0x85,0x83,0x16,0x8F,0x40,0x31,0x80,0x83,0x19,0x7D,0x38,0x05,0x1E,0x01,0xAA,0xC2};
byte eightch_m110_186RRE0644_e2[]={0x13,0x0D,0x00,0x09,0x36,0x3C,0x00,0x00,0x00,0x16,0x81,0x12,0x01,0x00,0x00,0x01,0x00,0x01,0x3D,0x85,0x1F,0x28,0x05,0xAB,0x08,0x00,0x00,0x05,0x00,0x01,0x3D,0x85,0x1F,0x28,0x05,0xAB,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

byte eightch_m110_186RWP0321_e1[]={0x52,0x50,0x57,0x30,0x33,0x32,0x31,0x45,0x5A,0x39,0xF0,0x32,0x00,0x00,0x00,0x0E,0xFE,0x59,0x00,0x03,0x35,0x03,0x35,0x13,0x3D,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x4A,0xD9,0x41,0xCE,0x06,0x01,0x07,0x08,0x08,0x70,0x06,0x01,0x07,0x80,0x81,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x1F,0xC3,0x05,0x25,0x53,0x25,0x17,0x2F,0x03,0x1A,0x78,0x36,0x21,0xD3,0x05,0x27,0x4D,0x23,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0xAA,0xC2};
byte eightch_m110_186RWP0321_e2[]={0x00,0x40,0x00,0x40,0x36,0x00,0x00,0x07,0x00,0x16,0x81,0x12,0x01,0x00,0x00,0x01,0x00,0x01,0x3C,0x85,0x1F,0x28,0x05,0xAB,0x08,0x00,0x00,0x05,0x00,0x01,0x3C,0x85,0x1F,0x28,0x05,0xAB,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

//77MHz PA?
// 2 channel micro
byte twoch_micro_817RPN0058_B_e1[]={0x00,0x58,0x00,0x57,0x16,0x81,0x12,0x01,0x02,0x00,0x00,0x40,0xB0,0x11,0x06,0x3B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x50,0x01,0x60,0x14,0x01,0xCB,0x14,0x01,0x60,0x0A,0x01,0xCB,0x0A,0x01,0x60,0x0A,0x01,0xCB,0x0A,0x01,0x60,0x0A,0x01,0xCB,0x0A,0x05,0x26,0x04,0x05,0xB1,0x34,0x05,0x26,0x04,0x05,0xB1,0x34,0x05,0x26,0x04,0x05,0xB1,0x34,0x05,0x26,0x04,0x05,0xB1,0x34,0x05,0x26,0x04,0x05,0xB1,0x34,0x05,0x26,0x04,0x05,0xB1,0x34,0x05,0x26,0x04,0x05,0xB1,0x34,0x05,0x26,0x04};

//245RLQ0854A 8 Channel micro 425/475/4/375/3625/3875/4375/45 (Vin) with M110 head 186RPW0321
// old style cpu board
byte eightch_4m_245RLQ0854A[]={0x7E,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x02,0x67,0x03,0xB4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xC3,0x05,0x25,0x53,0x25,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x17,0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0xE0};

//245RLQ0854B 8 Channel micro 425/475/4/375/3625/3875/4375/45 (Vin) with M110 head 186RPW0321
// old style cpu board
byte eightch_4m_245RLQ0854B[]={0xCE,0x00,0x9B,0x2A,0xA8,0x06,0x03,0x01,0x81,0x82,0x70,0x00,0x06,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x72,0x70,0x00,0x06,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x06,0x03,0x01,0x08,0x09,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0x85,0x19,0x28,0x05,0x6F,0x08,0xC5,0x19,0x24,0x45,0x6F,0x04,0xC5,0x19,0x2C,0x45,0x6F,0x0C,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x54};

//245RPS0459 8 Channel micro 425/475/4/375/3625/3875/4375/45 (Peter Matthews)
byte eightch_4m_245RPS0459A[]={0x4A,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x03,0x3A,0x03,0xB4,0x02,0x67,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x17,0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0xE0};
  
//245RPS0459 8 Channel micro 425/475/4/375/3625/3875/4375/45 (Peter Matthews)
byte eightch_4m_245RPS0459B[]={0xCC,0x00,0x9B,0x2A,0xA8,0x03,0x03,0x01,0x81,0x82,0x70,0x00,0x03,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x77,0x70,0x00,0x03,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0x85,0x19,0x28,0x05,0x6F,0x08,0x85,0x19,0x20,0x05,0x6E,0x50,0xC5,0x19,0x24,0x45,0x6F,0x04,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x59};

//245RLQ00875A 8 Channel micro 425/475/4/375/3625/3875/4375/45 M0MPM replacement 
byte eightch_4m_245RLQ00875A[]={0xEA,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x02,0x67,0x03,0xB4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x18,0xB0,0x04,0x1C,0x70,0x32,0x18,0xB0,0x04,0x1C,0x70,0x32,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0xE0};

//245RLQ00875B 8 Channel micro 425/475/4/375/3625/3875/4375/45 M0MPM replacement 
byte eightch_4m_245RLQ00875B[]={0xCE,0x00,0x9B,0x2A,0xA8,0x03,0x02,0x02,0x81,0x82,0x70,0x00,0x03,0x02,0x02,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x72,0x70,0x00,0x03,0x02,0x02,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x03,0x02,0x02,0x08,0x09,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0x85,0x19,0x28,0x05,0x6F,0x08,0xC5,0x19,0x24,0x45,0x6F,0x04,0xC5,0x19,0x2C,0x45,0x6F,0x0C,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x75};

//245RLQ00842A 8 Channel micro 425/475/4/375/3625/3875/4375/45 G3XYX Graham Bedwell old style CPU board
byte eightch_4m_245RLQ00842A[]={0x6B,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x02,0x67,0x03,0xB4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x5D,0x06,0x2D,0x42,0x1E,0x1F,0xC3,0x05,0x25,0x53,0x25,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0xE0};

//245RLQ00842B 8 Channel micro 425/475/4/375/3625/3875/4375/45 G3XYX Graham Bedwell old style CPU board
byte eightch_4m_245RLQ00842B[]={0xCE,0x00,0x9B,0x2A,0xA8,0x09,0x06,0x03,0x81,0x82,0x70,0x00,0x09,0x06,0x03,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x72,0x70,0x00,0x09,0x06,0x03,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x09,0x06,0x03,0x08,0x09,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0x85,0x19,0x28,0x05,0x6F,0x08,0xC5,0x19,0x24,0x45,0x6F,0x04,0xC5,0x19,0x2C,0x45,0x6F,0x0C,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x42};

// 245RLQ0883A 8 Channel micro original Tx71.875 Rx85.375
byte eightch_4m_245RLQ0883A[]={0x60,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x5D,0x06,0x2D,0x42,0x1E,0x1D,0xD3,0x05,0x22,0x5A,0x28,0x17,0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0x00};

// 245RLQ0883B 8 Channel micro original Tx71.875 Rx85.375
byte eightch_4m_245RLQ0883B[]={0xCE,0x00,0x93,0xCA,0xA1,0x09,0x05,0x01,0x81,0x82,0x70,0x00,0x09,0x05,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x70,0x70,0x00,0x09,0x05,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x09,0x05,0x01,0x08,0x09,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x83};
 
// 245RLQ0881A 8 Channel micro original Tx71.875 Rx85.375
byte eightch_4m_245RLQ0881A[]={0x51,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xB0,0x04,0x1C,0x70,0x32,0x1C,0x02,0x04,0x20,0x61,0x2B,0x1F,0xC3,0x05,0x25,0x53,0x25,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0x00};

// 245RLQ0881B 8 Channel micro original Tx71.875 Rx85.375
byte eightch_4m_245RLQ0881B[]={0xCE,0x00,0x93,0xCA,0xA1,0x02,0x04,0x06,0x81,0x82,0x70,0x00,0x02,0x04,0x06,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x71,0x70,0x00,0x02,0x04,0x06,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x02,0x04,0x06,0x08,0x09,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x81};

// 245RMC1244 micro 8 channel single eeprom 425H/L 475H/H 400H/L 70.4375 77Hz 70.45
// M0MPMs old radio
byte eightch_4m_245RMC1244A[]={0xC4,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x02,0x67,0x02,0x67,0x02,0x3E,0x02,0x93,0x03,0xB4,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,0x2F,0x03,0x1A,0x78,0x36,0x1C,0x02,0x04,0x20,0x61,0x2B,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0x60};

// 245RPS0459 Peter Matthews 435/475/400/375/350/3625/4375/450
//byte eightch_4m_245RPS0459A[]={0x4A,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x03,0x3A,0x03,0xB4,0x02,0x67,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x1A,0x4C,0x04,0x1E,0x68,0x2F,0x17,0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0xE0};  
//byte eightch_4m_245RPS0459B[]={0xCC,0x00,0x9B,0x2A,0xA8,0x03,0x03,0x01,0x81,0x82,0x70,0x00,0x03,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x77,0x70,0x00,0x03,0x03,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0x85,0x19,0x28,0x05,0x6F,0x08,0x85,0x19,0x20,0x05,0x6E,0x50,0xC5,0x19,0x24,0x45,0x6F,0x04,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x59};

// 245RPS0458B 8 ch micro 425H,425L,475H,475L,400H,400L,4375H,450H
byte eightch_4m_245RPS0458A[]={0xF2,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x03,0x3A,0x02,0x67,0x03,0xB4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xB0,0x04,0x1C,0x70,0x32,0x1C,0x02,0x04,0x20,0x61,0x2B,0x17,0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0xE0};
  
// 245RPS0458B 8 ch micro 425H,425L,475H,475L,400H,400L,4375H,450H
byte eightch_4m_245RPS0458B[]={0xCC,0x00,0x9F,0x2A,0xA8,0x02,0x04,0x01,0x81,0x82,0x70,0x00,0x02,0x04,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x79,0x70,0x00,0x02,0x04,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0x05,0x19,0x30,0x05,0x6F,0x10,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x58};

// should be same as 245RMC1244
byte RMC1244A[]={0xCD,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x02,0x67,0x02,0x67,0x02,0x3E,0x02,0x93,0x03,0xB4,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,0x2F,0x03,0x1A,0x78,0x36,0x1C,0x02,0x04,0x20,0x61,0x2B,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0x60,0xCC,0x00,0x9F,0xCA,0xA8,0x01,0x01,0x04,0x81,0x82,0x70,0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x71,0x70,0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0xC5,0x19,0x30,0x45,0x6F,0x10,0x05,0x19,0x30,0x05,0x6F,0x10,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x53};

byte cd_400_425[]={0xD4,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x02,0x67,0x02,0x67,0x02,0x3E,0x02,0x93,0x03,0xB4,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,0x2F,0x03,0x1A,0x78,0x36,0x1C,0x02,0x04,0x20,0x61,0x2B,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0x60,0xCC,0x00,0x9F,0xCA,0xA8,0x01,0x01,0x04,0x81,0x82,0x70,0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x72,0x70,0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x30,0x05,0x6F,0x18,0x05,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,0xC5,0x19,0x30,0x45,0x6F,0x10,0x05,0x19,0x30,0x05,0x6F,0x10,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x53};

#if 0
byte sevench[]={0x40,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,
0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x02,
0x67,0x02,0x67,0x02,0x3E,0x02,0x93,0x03,0xB4,0x02,0x67,0x02,0x67,0x02,0x67,0x02,
0x67,0x02,0x67,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,0x2F,0x03,0x1A,0x78,0x36,0x1C,
0x02,0x04,0x20,0x61,0x2B,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,
0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0x60,
0xCC,0x00,0x9F,0xCA,0xA7,0x01,0x01,0x04,0x81,0x82,0x70,0x00,0x01,0x01,0x04,0x08,
0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x79,0x70,
0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x18,0x40,0x05,0x6F,0x18,0x05,0x18,
0x40,0x05,0x6F,0x18,0x85,0x19,0x48,0x05,0x6F,0x28,0x05,0x19,0x48,0x05,0x6F,0x28,
0xC5,0x19,0x30,0x45,0x6F,0x10,0x05,0x19,0x30,0x05,0x6F,0x10,0xC5,0x19,0x3C,0x45,
0x6F,0x1C,0xC5,0x19,0x3C,0x45,0x6F,0x1C,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x53,};

#endif

byte mine_simons_245RPS0647[]={0x47,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,
0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,0x2F,0x03,0x1A,0x78,0x36,0x1C,
0x02,0x04,0x20,0x61,0x2B,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,
0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0x00,
0xCC,0x00,0x9F,0xCA,0xA8,0x01,0x01,0x04,0x81,0x82,0x70,0x00,0x01,0x01,0x04,0x08,
0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x73,0x70,
0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,
0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0x85,0x19,0x3C,0x05,0x6F,0x1C,
0x85,0x19,0x24,0x05,0x6F,0x04,0x85,0x19,0x34,0x05,0x6F,0x14,0x85,0x19,0x18,0x05,
0x6E,0x48,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x53};

byte unmodified_245RLQ0859[]={0xEB,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,
0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x1C,0x02,0x04,0x20,0x61,0x2B,0x18,0xB0,0x04,0x1C,0x70,0x32,0x1A,
0x4C,0x04,0x1E,0x68,0x2F,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,
0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0x00,
0xEB,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,
0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x1C,0x02,0x04,0x20,0x61,0x2B,0x18,0xB0,0x04,0x1C,0x70,0x32,0x1A,
0x4C,0x04,0x1E,0x68,0x2F,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,
0x15,0x99,0x45,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC7,0x00,
0xCE,0x00,0x93,0xCA,0xA1,0x04,0x02,0x03,0x81,0x82,0x70,0x00,0x04,0x02,0x03,0x08,
0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x70,0x70,
0x00,0x04,0x02,0x03,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x04,0x02,0x03,0x08,0x09,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,
0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,
0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,
0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x59,
0xCE,0x00,0x93,0xCA,0xA1,0x04,0x02,0x03,0x81,0x82,0x70,0x00,0x04,0x02,0x03,0x08,
0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x70,0x70,
0x00,0x04,0x02,0x03,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x04,0x02,0x03,0x08,0x09,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,
0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,
0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xD9,0x67,0x1E,0x5A,
0x15,0x46,0xD9,0x67,0x1E,0x5A,0x15,0x46,0xFF,0xFF,0xFF,0x3E,0xFF,0x01,0x08,0x59};

byte mine_simons_ch4_ctcss_enc_245RPS0647[] = {0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x02,
0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,
0x67,0x02,0x67,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,0x2F,0x03,0x1A,0x78,0x36,0x1C,
0x02,0x04,0x20,0x61,0x2B,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,
0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0xE0,
0x8C,0x03,0x35,0x13,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,

0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0x53,0x02,
0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,
0x67,0x02,0x67,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,0x2F,0x03,0x1A,0x78,0x36,0x1C,
0x02,0x04,0x20,0x61,0x2B,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x28,0xDC,0x83,
0x15,0x99,0x45,0x05,0x3E,0x01,0x0D,0x20,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0xE0,

0xCC,0x00,0x9F,0x0A,0xA8,0x01,0x01,0x04,0x81,0x82,0x70,0x00,0x01,0x01,0x04,0x08,
0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x74,0x70,
0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,
0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0xC5,0x19,0x3C,0x45,0x6F,0x1C,
0x85,0x19,0x24,0x05,0x6F,0x04,0x85,0x19,0x34,0x05,0x6F,0x14,0x85,0x19,0x18,0x05,
0x6E,0x48,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x53,

0xCC,0x00,0x9F,0x0A,0xA8,0x01,0x01,0x04,0x81,0x82,0x70,0x00,0x01,0x01,0x04,0x08,
0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x74,0x70,
0x00,0x01,0x01,0x04,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0x85,0x19,0x38,0x05,0x6F,0x18,0x85,0x19,
0x48,0x05,0x6F,0x28,0x85,0x19,0x30,0x05,0x6F,0x10,0xC5,0x19,0x3C,0x45,0x6F,0x1C,
0x85,0x19,0x24,0x05,0x6F,0x04,0x85,0x19,0x34,0x05,0x6F,0x14,0x85,0x19,0x18,0x05,
0x6E,0x48,0x85,0x19,0x40,0x05,0x6F,0x20,0xFF,0xFF,0xFF,0x3E,0xFF,0x00,0x04,0x53,};

byte testdata[]={
0xCC,0x00,0xF3,0xCC,0xC1,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,
0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x71,0x70,
0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xDD,0x19,0x40,0x5D,0x6F,0x20,0xDD,0x19,
0x40,0x5D,0x6F,0x20,0xDD,0x19,0x40,0x5D,0x6F,0x20,0xDD,0x19,0x40,0x5D,0x6F,0x20,
0xDD,0x19,0x40,0x5D,0x6F,0x20,0xDD,0x19,0x40,0x5D,0x6F,0x20,0xDD,0x19,0x40,0x5D,
0x6F,0x20,0xDD,0x19,0x40,0x5D,0x6F,0x20,0x00,0xFF,0xFF,0x3E,0x06,0x00,0x00,0x00,};
//checksum
//C8

// G8YFH
// 2 metres toneburst
// tx/rx/clock shift
// 145.075/145.675 Y
// 145.1625/145.7625 Y
// 145.125/145.725 Y
// 145.550 Y
// 145.450 Y
// 145.475 Y
// 145.500 Y
// 145.325 N
// ZVEI
// PRETIME encode pretime 140ms std
// ENC/DEC encode/decode
// MAB75 omit time out tine
// MAB858 omit auto reset
// MAB453 extended 1st tone 600ms
// MAB472 1 tone auto repeater access 1750Hz 1500ms
// MAU33EZA9J22AK
// 245RPY6598 on head
// 800ROC0108 on PA (maybe)
//
byte YFH[]={0xE5,0x02,0x3E,0x13,0x3C,0x30,0x18,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x4A,
0xD9,0x21,0x0F,0x24,0x2D,0x27,0x9B,0x2B,0xA9,0x2F,0xB7,0x34,0x15,0x39,0x12,0x3E,
0x60,0x44,0x9C,0x57,0x53,0x51,0x16,0x36,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x15,0xDD,0x04,0x0D,0x67,0x2E,0x17,0xED,0x04,0x0F,0x5D,0x2A,0x1A,
0x32,0x05,0x10,0x53,0x25,0x1C,0xE0,0x05,0x12,0x4A,0x21,0x1F,0x8E,0x06,0x14,0x42,
0x1E,0x22,0x72,0x83,0x09,0x95,0x43,0x35,0xA0,0x84,0x0F,0x5D,0x2A,0x39,0xC0,0x85,
0x10,0x56,0x27,0x05,0x00,0x06,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0x00,
0xCC,0x00,0xF3,0xCC,0xC8,0x11,0x70,0x70,0x70,0x70,0x70,0x01,0x01,0x70,0x70,0x70,
0x70,0x70,0x01,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x78,0x70,
0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x2C,
0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xD6,0x44,0x18,0xD5,0xF1,0x08,0xD6,0x44,
0x34,0xD5,0xF1,0x24,0xD6,0x44,0x28,0xD5,0xF1,0x18,0xD6,0x46,0x10,0xD5,0xF0,0x30,
0xD6,0x45,0x40,0xD5,0xF0,0x10,0xD6,0x45,0x48,0xD5,0xF0,0x18,0xD6,0x46,0x00,0xD5,
0xF0,0x20,0xD6,0x45,0x18,0x55,0xEF,0x38,0x00,0xFF,0xFF,0x3E,0x06,0x00,0x00,0x00,};


//PL/SQ 2CH control head
// 70.3875(1) 70.45 (2)
byte unmod_245RRN3223[]={0x32,0x41,0x81,0xD4,0x16,0x81,0x12,0x01,0x02,0x0C,0x00,0x4E,0xA8,0x20,0x16,0x3B,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x70,0x05,0x19,0x2C,0x05,0x6F,
0x0C,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,
0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,
0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,
0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x11,0x38};

byte close[]={0x32,0x41,0x81,0x27,0x16,0x81,0x12,0x01,0x03,0x00,0x00,0xAE,0xA8,0x20,0x16,0x3E,
0x1C,0x5C,0x12,0x61,0x12,0x61,0x12,0x61,0x12,0x61,0x12,0x61,0x12,0x61,0x12,0x61,
0x12,0x61,0x12,0x61,0x03,0xB5,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,
0x02,0x67,0x02,0x67,0x02,0x67,0x02,0x67,0x00,0x1C,0x38,0x01,0x1C,0x38,0x05,0x19,
0x2C,0x05,0x6F,0x0C,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,
0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,
0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,
0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,
0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,
0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,
0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,
0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,
0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,
0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,
0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,
0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x05,0x19,0x40,0x0D,0x6F,0x20,0x64,0x64,};

byte pl_experimental[]={0x32,0x41,0x81,0xD4,0x16,0x81,0x12,0x01,0x02,0x0C,0x00,0x4E,0xA8,0x20,0x16,0x3B,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x70,0x05,0x19,0x2C,0x05,0x6F,
0x0C,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,
0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,
0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,
0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x19,0x40,0x05,0x6F,0x20,0x05,0x11,0x38,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

// Graham Aisbitt
byte sel5_245RLL0387_orig[]={0xC9,0x03,0x34,0x13,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,
0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x21,0xD3,0x05,0x27,0x4D,0x23,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,
0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x31,0x80,0x83,
0x19,0x7D,0x38,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x87,0xC1,0x00,
0xCE,0x00,0xF3,0xCA,0xA1,0x07,0x01,0x01,0x81,0x82,0x70,0x00,0x07,0x01,0x01,0x08,
0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x73,0x70,
0x00,0x07,0x01,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x07,0x01,0x01,0x08,0x09,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xDD,0x1F,0x28,0xDD,0xAB,0x08,0xDD,0x1F,
0x28,0xDD,0xAB,0x08,0xDD,0x1F,0x28,0xDD,0xAB,0x08,0xDD,0x1F,0x28,0xDD,0xAB,0x08,
0xDD,0x1F,0x28,0xDD,0xAB,0x08,0xDD,0x1F,0x28,0xDD,0xAB,0x08,0xDD,0x1F,0x28,0xDD,
0xAB,0x08,0xDD,0x1F,0x28,0xDD,0xAB,0x08,0x00,0xFF,0xFF,0x3E,0x06,0x00,0x00,0x00};


// Graham Aisbitt
// MAB 137 CCIR
// PRETIME ENCODE PRETIME 140ms STD
// MAB 445 ENCODE ONLY
// MAB  75 OMIT TIMEOUT TIME
// MAB 858 OMIT AUTO RESET
// MAB 889 RF POWER LEVEL
// MAB 448 100 LEVEL
// GROUPCA STANDARD GROUPCALL
// AUTOACK STANDARD AUTO ACKNOWLEDGE
// MAB 880 OMIT BASECALL
// CONTROL 8 CHANNEL
byte sel5_245RLL0387_modified[]={0x36,0x03,0x34,0x13,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x3C,0x00,0x00,0x3D,
0xC8,0x23,0x0E,0x25,0x54,0x27,0xC3,0x2A,0x5A,0x2D,0x18,0x30,0x07,0x33,0x25,0x36,
0x7C,0x3A,0x02,0x4A,0xD9,0x41,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x21,0xD3,0x05,0x27,0x4D,0x23,0x17,0x2F,0x03,0x1A,0x78,0x36,0x17,
0x2F,0x03,0x1A,0x78,0x36,0x24,0x08,0x06,0x2A,0x48,0x20,0x24,0x08,0x06,0x2A,0x48,
0x20,0x1F,0xC3,0x05,0x25,0x53,0x25,0x2B,0x85,0x83,0x16,0x8F,0x40,0x31,0x80,0x83,
0x19,0x7D,0x38,0x05,0x02,0x01,0x0D,0x09,0x00,0x13,0x36,0x00,0x00,0x00,0x00,0x00,
0xCC,0x00,0xF7,0xCA,0xA8,0x07,0x01,0x01,0x81,0x82,0x70,0x00,0x01,0x70,0x70,0x70,
0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x71,0x70,0x70,0x76,0x70,
0x00,0x07,0x01,0x01,0x08,0x08,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,
0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,0x70,0x70,0x70,0x00,0x01,0x70,0x70,
0x70,0x70,0x70,0x00,0x16,0x81,0x12,0x01,0xCD,0x19,0x38,0x4D,0x6F,0x18,0x4D,0x19,
0x38,0x4D,0x6F,0x18,0xCD,0x19,0x48,0x4D,0x6F,0x28,0x4D,0x19,0x48,0x4D,0x6F,0x28,
0xCD,0x19,0x30,0x4D,0x6F,0x10,0x4D,0x19,0x30,0x4D,0x6F,0x10,0xCD,0x19,0x28,0x4D,
0x6F,0x08,0xCD,0x19,0x40,0x4D,0x6F,0x20,0x00,0xFF,0xFF,0x3E,0x06,0x00,0x00,0x00};



#define BANK_LEN 256
#define FULL_EELEN (BANK_LEN*2)

void i2c_eeprom_write_byte(int deviceaddress, unsigned int eeaddress, byte data)
{
    int rdata = data;
    Wire.beginTransmission(deviceaddress);
    //Wire.write((int)(eeaddress >> 8)); // MSB
    Wire.write((int)(eeaddress & 0xFF)); // LSB
    Wire.write(rdata);
    Wire.endTransmission();
}

// WARNING: address is a page address, 6-bit end will wrap around
// also, data can be maximum of about 30 bytes, because the Wire library has a buffer of 32 bytes
void i2c_eeprom_write_page(int deviceaddress, unsigned int eeaddresspage, byte* data, byte length)
{
    Wire.beginTransmission(deviceaddress);
    Wire.write((int)(eeaddresspage >> 8)); // MSB
    Wire.write((int)(eeaddresspage & 0xFF)); // LSB
    byte c;
    for ( c = 0; c < length; c++)
        Wire.write(data[c]);
    Wire.endTransmission();
}

byte i2c_eeprom_read_byte(int deviceaddress, unsigned int eeaddress)
{
    byte rdata = 0xFF;
    Wire.beginTransmission(deviceaddress);
    //Wire.write((int)(eeaddress >> 8)); // MSB
    Wire.write((int)(eeaddress & 0xFF)); // LSB
    Wire.endTransmission();
    Wire.requestFrom(deviceaddress,1);
    if (Wire.available()) rdata = Wire.read();
    return rdata;
}

// maybe let's not read more than 30 or 32 bytes at a time!
void i2c_eeprom_read_buffer(int deviceaddress, unsigned int eeaddress, byte *buffer, int length)
{
    Wire.beginTransmission(deviceaddress);
    Wire.write((int)(eeaddress >> 8)); // MSB
    Wire.write((int)(eeaddress & 0xFF)); // LSB
    Wire.endTransmission();
    Wire.requestFrom(deviceaddress,length);
    int c = 0;
    for ( c = 0; c < length; c++ )
        if (Wire.available()) buffer[c] = Wire.read();
}




void setup()
{
    Wire.begin(); // initialise the connection
    Serial.begin(115200);
    
    //i2c_eeprom_write_page(0x50, 0, (byte *)somedata, sizeof(somedata)); // write to EEPROM

    delay(100); //add a small delay
    Serial.println("Initialised");
}

byte *find_i2caddrs()
{
  byte i=0;
  byte i2caddr=1;
  static byte i2caddrs[5];

  memset(i2caddrs, 0xFF, sizeof(i2caddrs));

  while (i2caddr) // wrap at 256 == 0
  {
    byte b=0xFF;

    // may hang
    b = i2c_eeprom_read_byte(i2caddr, 0); // access the first address from the memory
    if (b != 0xFF)
    {
      if ((i2caddr != 0xD0) && (i2caddr!=0xD1))
      {
        i2caddrs[i++] = i2caddr;
      }
    }
    i2caddr++;
  }

  if (i)
    return i2caddrs;
  else
    return NULL;
}

int bank_len(const byte i2caddr)
{
    const int tvlen=16;
    const byte attempts=3;
    byte tv1[tvlen], tv2[tvlen];
    byte matches = 0;
    int result;

    for (int m=0; m<3; m++)
    {
        for (int i=0; (i<tvlen); i++)
        {
            tv1[i]=i2c_eeprom_read_byte(i2caddr, i);
            tv2[i]=i2c_eeprom_read_byte(i2caddr, 128+i);
        }

        if (memcmp(tv1,tv2,tvlen)==0)
            matches++;
    }
    
    result = (matches == attempts) ? 128 : 256;

    return result;
}

int read_bank(byte i2caddr, byte *data)
{
   int addr=0; //first address
    byte printed=0;
    byte csum=0;
    byte tres[10];
    byte cval;
    byte j;
    byte failed;
    byte b;
    int bank_length = bank_len(i2caddr);

    while (addr<bank_length)
    {
        failed=true;
        while (failed)
        {
        for (j=0; j<10; j++)
        {
          tres[j] = i2c_eeprom_read_byte(i2caddr, addr); //access an address from the memory
        }
        cval=tres[0];
        for (j=1; j<10; j++)
        {
          if (tres[j]!=cval)
              break;
        }
        if (j==10)
          failed=false;
        }
        
        b=data[addr]=cval;
        
        Serial.print("0x");
        if (b<16)
          Serial.print(0);
        Serial.print(b, HEX); //print content to serial port

        printed++;
        if ((printed%16)==0)
          Serial.println(",");
        else
          Serial.print(",");
          
        addr++;
    }

    return bank_length;
}

#if 0
void checkeprom()
{
   int addr=0; //first address
    Serial.println("checking");
    //byte i2caddr=0xA0;
    byte i2caddr=0x01;
    byte b=0xFF;
    byte printed=0;

#if 1   
    while (i2caddr)
    {
      b = i2c_eeprom_read_byte(i2caddr, 0); // access the first address from the memory
      if (b != 0xFF)
        break;
      i2caddr+=1;
      delay(10);
    }
#endif
    //i2caddr=0xA3;
    Serial.println("i2caddr");
    Serial.print(i2caddr,HEX);
    Serial.println();
 
    delay(1000);
    while (addr<BANK_LEN)
    {
        if (b!=edata[addr])
        {
          Serial.print("Fail at ");
          Serial.println(addr, HEX);
        }
        addr++; //increase address
        b = i2c_eeprom_read_byte(i2caddr, addr); //access an address from the memory
    }
    addr=0;
    Serial.println(" ");
    delay(10000);
}
#endif

bool check_for_valid_data(const byte *data)
{
    bool ok=false;

    for (int j=1; j<30; j++)
    {
      if (data[j] != 0xFF)
      ok = true;
      break;
    }

    return ok;
}

int write_bank(byte i2caddr, const byte *data)
{
    int addr=0; //first address
    int bank_length;

    Serial.print("starting write");
    Serial.println(i2caddr, HEX);

    if (!check_for_valid_data(data))
    {
      Serial.println("write: data is not ok");
      return 0;
    }

    bank_length = bank_len(i2caddr);

    while (addr<bank_length)
    {
        i2c_eeprom_write_byte(i2caddr, addr, data[addr]); 
        delay(100);
        while (i2c_eeprom_read_byte(i2caddr, addr) != data[addr])
        {
          Serial.print("retry at ");
          Serial.println(addr, HEX);
          i2c_eeprom_write_byte(i2caddr, addr, data[addr]); 
          delay(100);
        }
        
        addr++; //increase address
    }

  return bank_length;
}

byte calc_checksum(byte *edata, int length)
{
  byte csum=0;

  for (int i=1; i<length; i++)
      csum += edata[i];

  return 255-csum;
}

int read_eeprom(byte *data, int len_to_read_in)
{
  byte *i2caddrs;
  byte *ptr=data;
  byte csum;
  byte i;
  int len_to_read;

  Serial.println("read_eeprom");
   
  i2caddrs = find_i2caddrs();

  Serial.println("read_eeprom: i2caddrs:");

  if (!i2caddrs)
      return 0;

  for (i=0; (i2caddrs[i] != 0xFF); i++)
  {
    Serial.print(i2caddrs[i], HEX);
    Serial.print(" ");
    Serial.println(bank_len(i2caddrs[i]));
  }

  for (i=0; (i2caddrs[i] != 0xFF); i++)
  {
    ptr += read_bank(i2caddrs[i], ptr);
  }

  if (len_to_read_in)
    len_to_read = len_to_read_in;
  else
    len_to_read = ptr - data;

  csum = calc_checksum(data, len_to_read);

  Serial.println("checksum");
  Serial.println(csum, HEX);

  
  return len_to_read;
}

bool write_eeprom(const byte *data, const int datalen)
{
  byte *i2caddrs;
  byte csum;
  byte i;
  int capacity = 0;
  int remaining = datalen;

  i2caddrs = find_i2caddrs();

  if (!i2caddrs)
      return false;

  Serial.println("write_eeprom: i2caddrs:");

  for (i=0; (i2caddrs[i] != 0xFF); i++)
  {
    capacity += bank_len(i2caddrs[i]);
    Serial.println(i2caddrs[i], HEX);
  }

  if (capacity < datalen)
  {
      Serial.println("write: insufficient space");
      return false;
  }

  for (int i=0, written=0; (remaining > 0); i++, data+=written)
  {
    written =  write_bank(i2caddrs[i], data);

    if (!written)
    {
      Serial.println("nothing written");
      return false;
    }

    remaining -= written;
  }

  return true;
}

void loop()
{

  byte written=false;
  byte *data=YFH;
  byte data_store[FULL_EELEN];
  byte banks;
  int csum, readback_len, act_readback_len;

#if 0
  //Serial.print(edata[202], HEX);
  //edata[202]=0x00;
  //edata[158]=0x76;
  //csum=calc_checksum(edata);
  //Serial.print(csum, HEX);
  //edata[0]=csum;
     
  //readeprom(data);


  //data[47]=0x00;
  //data[48]=0x0A;
  //data[158]=0x76;
  //edata[0]=calc_checksum(data);
#endif

#if 0
  if (!written)
  {
    write_bank(data);
    written=true;
  }
#endif
  //checkeprom();
  //checkeprom();

#if 1
#define datsrc pl_experimental
  csum=calc_checksum(datsrc, sizeof(datsrc));
  Serial.print(csum, HEX);
#endif

#if 1
  if (!written)
  {
      write_eeprom(datsrc, sizeof(datsrc));
      written = true;
  }
#endif

  // read back
#ifdef datsrc
  readback_len = sizeof(datsrc);
#else
  readback_len = 0;
#endif

  act_readback_len = read_eeprom(data_store, readback_len);
  
  csum=calc_checksum(data_store, act_readback_len);
  Serial.print(csum, HEX);


  delay(10000);
}
